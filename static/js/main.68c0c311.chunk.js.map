{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Title","props","titleButtonTxt","mode","titleText","className","Fade","appear","in","fadeIn","onClick","setFadeIn","setTimeout","setMode","prev","disabled","list","length","Main","useState","checkBox","setCheckBox","isCommitted","setIsCommitted","mainText","setMainText","statusIcon","commitButton","setList","showText","checked","type","onChange","slice","randListIndex","concat","addText","sm","event","target","value","id","App","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","Math","floor","random","Col","md","lg","xl","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAAe,I,qBCmBf,SAASA,EAAMC,GACb,IAAIC,EAA6B,QAAZD,EAAME,KAAc,IAAM,IAC3CC,EAAwB,QAAZH,EAAME,KAAc,QAAU,iBAC9C,OACI,sBAAKE,UAAU,UAAf,UACE,cAACC,EAAA,EAAD,CAAMC,QAAQ,EAAMC,GAAIP,EAAMQ,OAA9B,SACE,wBAAQJ,UAAU,sBAChBK,QAAS,WACPT,EAAMU,WAAU,GAChBC,YAAW,WAAWX,EAAMY,SAAQ,SAAAC,GAAI,MAAU,QAANA,EAAc,MAAM,YAAU,KAC1EF,YAAW,WAAWX,EAAMU,WAAU,KAAO,MAE/CI,SAA6B,GAAnBd,EAAMe,KAAKC,OANvB,SAOGf,MAGL,cAACI,EAAA,EAAD,CAAMC,QAAQ,EAAMC,GAAIP,EAAMQ,OAA9B,SACE,qBAAIJ,UAAU,qBAAd,UAAoCD,EAApC,YAMV,SAASc,EAAKjB,GAAO,IAAD,EACakB,oBAAS,GADtB,mBACZC,EADY,KACFC,EADE,OAEmBF,oBAAS,GAF5B,mBAEZG,EAFY,KAECC,EAFD,OAGaJ,mBAAS,IAHtB,mBAGZK,EAHY,KAGFC,EAHE,KAIdC,EAAaJ,EAAa,SAAM,GAEhCK,EACF,wBAAQtB,UAAU,qBAChBK,QAAS,WACPa,GAAgBD,GAChBV,YAAW,WAAWW,GAAe,KAAS,MAC9CtB,EAAM2B,SAAQ,SAAAd,GAAI,4BAAQA,GAAR,CAAaU,OAC/BC,EAAY,KACZV,SAAUO,GAAyB,IAAVE,EAN7B,oBAiBF,IAAIK,EACF,sBAAKxB,UAAU,UAAf,UACI,uBACEA,UAAU,uBACVyB,QAASV,EACPW,KAAK,WACLC,SAAU,WACRX,GAAY,GACZT,YAAW,WAAWS,GAAY,KAAQ,KAC1CpB,EAAM2B,SAAQ,SAAAd,GAAI,OAAIA,EAAKmB,MAAM,EAAEhC,EAAMiC,eAAeC,OAAOrB,EAAKmB,MAAMhC,EAAMiC,cAAc,QAEhGnB,SAAUK,IACd,sBAAMf,UAAU,mBAAhB,SACsB,GAAnBJ,EAAMe,KAAKC,QAlBhBhB,EAAMU,WAAU,GAChBC,YAAW,WAAWX,EAAMY,QAAQ,SAAS,UAC7CZ,EAAMU,WAAU,IAkBVV,EAAMe,KAAKf,EAAMiC,oBAKvBE,EACF,sBAAK/B,UAAU,UAAf,UACI,uBACEA,UAAU,oBACVgC,GAAG,KACHL,SAAU,SAACM,GAAD,OAAWb,EAAYa,EAAMC,OAAOC,QAC9CA,MAAOhB,IAGT,sBAAMiB,GAAG,cAAT,SACGf,IAEFC,KAIP,OACM,cAACrB,EAAA,EAAD,CAAME,GAAIP,EAAMQ,OAAhB,SACe,QAAZR,EAAME,KAAa0B,EAASO,IAiDxBM,MApJf,WAAgB,IAAD,EACWvB,mBAAS,QADpB,mBACNhB,EADM,KACAU,EADA,OA+Gf,SAAyB8B,EAAKC,GAAc,MAGJzB,oBAAS,WAC7C,IAEE,IAAM0B,EAAOC,OAAOC,aAAaC,QAAQL,GAEzC,OAAOE,EAAOI,KAAKC,MAAML,GAAQD,EACjC,MAAOO,GAGP,OADAC,QAAQC,IAAIF,GACLP,MAZ+B,mBAGnCU,EAHmC,KAGtBC,EAHsB,KAiC1C,MAAO,CAACD,EAfS,SAAAd,GACf,IAEE,IAAMgB,EACJhB,aAAiBiB,SAAWjB,EAAMc,GAAed,EAEnDe,EAAeC,GAEfV,OAAOC,aAAaW,QAAQf,EAAKM,KAAKU,UAAUH,IAChD,MAAOL,GAEPC,QAAQC,IAAIF,MA1IQS,CAAgB,6BAA6B,IAFxD,mBAEN5C,EAFM,KAEAY,EAFA,OAGcT,oBAAS,GAHvB,mBAGNV,EAHM,KAGCE,EAHD,KAIPuB,EAAgB2B,KAAKC,MAAMD,KAAKE,SAAW/C,EAAKC,QAEtD,OACE,eAAC+C,EAAA,EAAD,CAAK3B,GAAI,GAAI4B,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG9D,UAAU,gBAA5C,UACI,cAACL,EAAD,CAAOS,OAAQA,EAAQE,UAAWA,EAAWR,KAAMA,EAAMU,QAASA,EAASG,KAAMA,IACjF,cAACE,EAAD,CAAMT,OAAQA,EAAQE,UAAWA,EAAWR,KAAMA,EAAMU,QAASA,EAASG,KAAMA,EAAMY,QAASA,EAASM,cAAeA,QCFhHkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBZ,UACxC,6BAAqBa,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.68c0c311.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react';\nimport {Col, Fade} from 'react-bootstrap';\n\nfunction App() {\n  const [mode, setMode] = useState(\"show\");\n  const [list, setList] = useLocalStorage('listSPECIALforTODOcodedzxc',[]);\n  const [fadeIn,setFadeIn] = useState(true);\n  const randListIndex = Math.floor(Math.random() * list.length);\n\n  return (\n    <Col sm={12} md={7} lg={6} xl={4} className=\"x_grid_master\">\n        <Title fadeIn={fadeIn} setFadeIn={setFadeIn} mode={mode} setMode={setMode} list={list}/>\n        <Main fadeIn={fadeIn} setFadeIn={setFadeIn} mode={mode} setMode={setMode} list={list} setList={setList} randListIndex={randListIndex}/>\n    </Col>\n  );\n}\n\nfunction Title(props){\n  let titleButtonTxt = props.mode==\"show\"? \"+\" : \"<\";\n  let titleText = props.mode==\"show\"? \"To Do\" : \"Add to my list\";\n  return (\n      <div className=\"x_Title\">\n        <Fade appear={true} in={props.fadeIn}>\n          <button className=\"x_grid_title_button\" \n            onClick={() => {\n              props.setFadeIn(false);\n              setTimeout(function(){props.setMode(prev => prev==\"show\"? \"add\":\"show\")}, 250);\n              setTimeout(function(){props.setFadeIn(true)},250);\n              }}\n            disabled={props.list.length==0}>\n            {titleButtonTxt}\n          </button>\n        </Fade>\n        <Fade appear={true} in={props.fadeIn}>\n          <h1 className=\"x_grid_title_title\">{titleText}:</h1>\n        </Fade>\n      </div>\n    );\n}\n\nfunction Main(props){\n  const[checkBox, setCheckBox] = useState(false);\n  const[isCommitted, setIsCommitted] = useState(false);\n  const[mainText, setMainText] = useState(\"\");\n  let statusIcon = isCommitted? \"âœ“\" : \"\";\n\n  let commitButton = (\n    <button className=\"x_grid_main_commit\"\n      onClick={()=> {\n        setIsCommitted(!isCommitted);\n        setTimeout(function(){setIsCommitted(false)}, 1500);\n        props.setList(prev => [...prev,mainText]);\n        setMainText(\"\");\n      }}disabled={isCommitted || mainText==\"\"}>\n        Commit\n      </button>\n  );\n\n  function switchMode(){\n      props.setFadeIn(false);\n      setTimeout(function(){props.setMode(\"add\")}, 1000);\n      props.setFadeIn(true);\n  }\n\n  let showText = (\n    <div className=\"x_Main1\">\n        <input \n          className=\"x_grid_main_checkbox\"\n          checked={checkBox}\n            type=\"checkbox\" \n            onChange={() => {\n              setCheckBox(true);\n              setTimeout(function(){setCheckBox(false)},2000);\n              props.setList(prev => prev.slice(0,props.randListIndex).concat(prev.slice(props.randListIndex+1)));\n            }}\n            disabled={checkBox}/>\n        <span className=\"x_grid_main_note\">\n          {props.list.length==0?\n            switchMode():\n            props.list[props.randListIndex]}\n        </span>\n    </div>\n  );\n\n  let addText = (\n    <div className=\"x_Main2\">\n        <input \n          className=\"x_grid_main_input\"\n          sm=\"12\"\n          onChange={(event) => setMainText(event.target.value)}\n          value={mainText}\n          />\n      \n        <span id=\"green-check\">\n          {statusIcon}\n        </span>\n        {commitButton}\n    </div>\n  );\n  \n  return (\n        <Fade in={props.fadeIn}>\n          {props.mode==\"show\"?showText:addText}\n        </Fade>\n    );\n}\n\n\n\n\n\n\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}